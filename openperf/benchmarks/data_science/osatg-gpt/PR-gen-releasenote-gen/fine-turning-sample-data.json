{"sentences": "add support for arbitrary args in keybindings [sep] enables the user to provide arbitrary argument values to shortcut actions through a new args member of keybindings . for some keybindings , like newtabwithprofile < n > , we previously needed 0 different shortcutactions , one for each value of index . if a user wanted to have a newtabwithprofile11 keybinding , that was simply impossible . now that the args are in their own separate json object , each binding can accept any number of arbitrary argument values . so instead of : . { `` command '' : `` newtab '' , `` keys '' : [ `` ctrl+shift+t '' ] } , . { `` command '' : `` newtabprofile0 '' , `` keys '' : [ `` ctrl+shift+1 '' ] } , . { `` command '' : `` newtabprofile1 '' , `` keys '' : [ `` ctrl+shift+2 '' ] } , . { `` command '' : `` newtabprofile2 '' , `` keys '' : [ `` ctrl+shift+3 '' ] } , . { `` command '' : `` newtabprofile3 '' , `` keys '' : [ `` ctrl+shift+4 '' ] } , . we can now use : . { `` command '' : `` newtab '' , `` keys '' : [ `` ctrl+shift+t '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+1 '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+2 '' ] } , . { `` command '' : { `` action '' : `` newtab '' , `` index '' : 0 } , `` keys '' : [ `` ctrl+shift+3 '' ] } , . initially , this does seem more verbose . however , for cases where there are multiple args , or there 's a large range of values for the args , this will quickly become a more powerful system of expressing keybindings . the `` legacy '' keybindings are left in in this pr . they have helper methods to generate appropriate iactionargs values . prior to releasing 1.0 , i think we should remove them , if only to remove some code bloat . see the spec for more details . i work here . ran tests . removed the legacy keybindings from the defaults.json , everything still works . tried leaving the legacy keybingings in my profiles.json , everything still works . [sep] this is a start , but there 's a weird linker bug if i take the setkeybinding ( shortcutaction , keychord ) implementation out , which i do n't totally understand.a good old-fashioned clean will fix that right up.all these things work.hey this actually _functionally_ works.mostly cleanup and completion of implementation.hey i bet we could just make newtab the handler for newtabwithprofile.start writing tests for keybinding args.add tests.revert a bad sln change , and clean out dead code.merge branch 'master ' into dev/migrie/f/1142-arbitrary-args.area-settings.product-terminal .", "releasenote": "key bindings now support arguments ; check the default settings for some examples of how this works"}
